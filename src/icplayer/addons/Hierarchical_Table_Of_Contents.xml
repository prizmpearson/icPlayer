<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Table_Of_Contents" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Table_Of_Contents_property_title_label" type="string"/>
        <property displayName="Display only chapters" name="displayOnlyChapters" nameLabel="Hierarchical_Table_Of_Contents_property_display_only_chapters" type="boolean"/>
        <property displayName="Show Pages" isLocalized="true" name="showPages" nameLabel="Hierarchical_Table_Of_Contents_property_show_pages" type="{All, Reportable, Not-reportable}"/>
    </model>
<css>.hier_report {
    padding: 15px;
    border-radius: 5px;
    border: 1px solid gray;
    background-color: white;
    color: gray;
    overflow: auto;
}

.hier_report td{
    padding: 10px;
}

.hier_report-header{
    font-weight: bold;
    color: black !important;
    background-color: #bde0ff;
}
.hier_report-footer{
    font-weight: bold;
    color: black !important;
    background-color: #bde0ff;
}

.hier_report-chapter{
    background-color: Lavender;
}

.hier_report-odd{
    background-color: AliceBlue;
}

.hier_report-even{
    background-color: #f0f1ff;
}

.hier_report-progress {
    text-align:center;
    color:#0A8DBD;
    display: inline-block;
    width: 190px;
}

.hier_report-checks {
    width: 10%;
    color: green;
    text-align: center;
}

.hier_report-mistakes {
    width: 10%;
    color: #990000;
    text-align: center;
}

.hier_report-errors {
    width: 10%;
    color: red;
    text-align: center;
}

.hier_report-page-score {
    width: 10%;
    color: blue;
    text-align: center;
}

.hier_report-page-non-max-score, .hier_report-page-max-score {
    width: 10%;
    text-align: center;
}

.ui-progressbar {
    padding:2px;
    width:	130px  !important;
    height: 15px    !important;
    border-radius: 5px;
    border:2px solid #02789F;
    background-color: #3CC6CD;
    border-radius: 5px;
    float: left;
}

.hier_drag-source{
    border: 1px solid orange;
}

.hier_report .treegrid-expander {
	float: left;
}

.hier_report .treegrid-indent {
	float: left;
}

.hier_report .text-wrapper {
	overflow: hidden;
}
</css><view> &lt;div class="hier_report"&gt;
     &lt;table  style="width: 100%"&gt;
     &lt;/table&gt;
 &lt;/div&gt;

</view><preview>&lt;div class="hier_report"&gt;
    &lt;table  style="width: 100%"&gt;
    &lt;/table&gt;
&lt;/div&gt;
</preview><presenter>function AddonHierarchical_Table_Of_Contents_create() {
    var presenter = function () {};
    var presentationController;
    var pageIndex = 0;

    presenter.isVisible = null;

    presenter.ERROR_MESSAGES = {
    };

    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }

    function returnCorrectObject(v) { return { isValid: true, value: v }; }

    presenter.executeCommand = function (name, params) {
        var commands = {
            'show': presenter.show,
            'hide': presenter.hide
        };

        return Commands.dispatch(commands, name, params, presenter);
    };

    presenter.showErrorMessage = function (message, substitutions) {
        var errorContainer;
        if (typeof(substitutions) == 'undefined') {
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';
        } else {
            var messageSubst = message;
            for (var key in substitutions) {
                if (substitutions.hasOwnProperty(key)) {
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);
                }
            }
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';
        }
        presenter.$view.html(errorContainer);
    };

    presenter.setPlayerController = function (controller) {
        presentationController = controller;
    };

    presenter.run = function (view, model) {
        presenter.initialize(view, model, false);
    };

    presenter.createPreview = function (view, model) {
        presenter.initialize(view, model, true);
    };

    function addHeader() {
        var headerHTML = "&lt;td&gt; " + presenter.configuration.labels.title + "&lt;/td&gt;";
        $("&lt;tr&gt;&lt;/tr&gt;").prependTo(getJqueryTable()).addClass("hier_report-header").html(headerHTML);
    }

    function addFooter() {
        var row = document.createElement('tr');
        $(row).appendTo(getJqueryTable());
        $(row).addClass("hier_report-footer");
    }

    function createRow(index, parentIndex, isChapter) {
        var row = document.createElement('tr');

        $(row).appendTo(getJqueryTable());
        $(row).addClass("treegrid-" + index);

        if (parentIndex != null) {
            $(row).addClass("treegrid-parent-" + parentIndex);
        }

        if (isChapter) {
            $(row).addClass("hier_report-chapter");
        } else {
            $(row).addClass(index % 2 &gt; 0 ? "hier_report-odd" : "hier_report-even");
        }

        return row;
    }

    function generatePageLinks(text, isChapter, pageId) {
        var $element = $(document.createElement('td')),
            $link = $("&lt;a&gt;&lt;/a&gt;").text(text).attr('href', '#').attr('data-page-id', pageId);

        $element.append($('&lt;div class="text-wrapper"&gt;').html(isChapter ? text : $link));

        return $element;
    }

    function addRow(name, index, parrentIndex, isChapter, pageId) {
        var row = createRow(index, parrentIndex, isChapter);

        var nameCell = generatePageLinks(name, isChapter, pageId);
        if(row != null){
            $(nameCell).appendTo($(row));
        }
    }

    function resetScore() {
        return {
            score: 0,
            countedScore: 0,
            maxScore: 0,
            countedMaxScore: 0,
            errorCount: 0,
            checkCount: 0,
            mistakeCount: 0,
            count: 0
        };
    }

    presenter.createPreviewTree = function() {
        var pagesMockup = [
            {name : "Page1", parent : null},
            {name : "Unit1", parent : null},
            {name : "Chapter2", parent : 1},
            {name : "Page5", parent : 6},
            {name : "Page6", parent : 1},
            {name : "Page7", parent : null},
            {name : "Page8", parent : null},
            {name : "Page9", parent : null},
            {name : "Page10", parent : null},
            {name : "Page11", parent : null},
            {name : "Unit2", parent : null},
            {name : "Page12", parent : 10},
            {name : "Page13", parent : 10}
        ];

        var chapterScore = resetScore();
        for (var i = 0; i &lt; pagesMockup.length; i++) {
            if(pagesMockup[i].name == "Unit1" || pagesMockup[i].name == "Unit2"){
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, true, "some_id");
            }else{
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, false, "some_id");
            }
        }
        return chapterScore;
    };

    presenter.createTree = function (root, parrentIndex, pageCount) {
        var chapterIndex = 0,
            chapterScore = resetScore(),
            pageScore = resetScore(),
            isEmpty = true,
            values = {},
            isEnabled = true;

        for (var i = 0; i &lt; pageCount; i++) {
            var isChapter = (root.get(i).type == "chapter");

            if (!isChapter &amp;&amp; !root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Reportable") continue;
            if (!isChapter &amp;&amp; root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Not-reportable") continue;
            if (!isChapter &amp;&amp; root.get(i).isReportable()) {
                isEmpty = false;
            }
            var pageId = "chapter";
            if (!isChapter) {
                pageId = root.get(i).getId();
            }
            addRow(root.get(i).getName(), pageIndex, parrentIndex, isChapter, pageId);
            pageScore = presentationController.getScore().getPageScoreById(pageId);
            pageScore.count = 1;
            pageIndex++;
            if (isChapter) {
                chapterIndex = pageIndex - 1;
                values = presenter.createTree(root.get(i), chapterIndex, root.get(i).size());
                pageScore =  values.pagesScore;
            }
        }

        return { pagesScore: chapterScore, isEmpty: isEmpty };
    };

    function handleMouseClickActions() {
        var commander = presentationController.getCommands(),
            $report = presenter.$view.find('.hier_report tr');

        $report.find('td a').each(function () {
            $(this).click(function (event) {
                event.preventDefault();
                event.stopPropagation();
                commander.gotoPageId($(this).attr('data-page-id'));
            });
        });

        $report.find('.treegrid-expander').each(function () {
            $(this).click(function (event) {
                event.preventDefault();
                event.stopPropagation();
            });
        });
    }

    function expandTree(level) {
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {
            if ($(this).treegrid('getDepth') &lt; level) {
                $(this).treegrid('expand');
            }
        });
    }

    function saveTreeState() {
        var state = [];
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {
            state.push($(this).treegrid('isExpanded'))
        });
        return state;
    }

    function restoreTreeState(state) {
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {
            $(this).treegrid(state[$(this).treegrid('getNodeId')] ? 'expand' : 'collapse');
        });
    }

    presenter.getState = function () {
        return JSON.stringify({
            'treeState': saveTreeState(),
            'isVisible': presenter.isVisible,
        });
    };

    presenter.setState = function (stateString) {
        var state = JSON.parse(stateString);

        restoreTreeState(state.treeState);

        presenter.setVisibility(state.isVisible);
    };

    presenter.validateModel = function (model) {
        return {
            ID: model.ID,
            isValid: true,
            width: parseInt(model["Width"], 10),
            height: parseInt(model["Height"], 10),
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),
            labels: {
                title: model['titleLabel']
            },
            displayOnlyChapters: ModelValidationUtils.validateBoolean(model.displayOnlyChapters),
            showPages: model.showPages
        };
    };

    presenter.setVisibility = function (isVisible) {
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");
        presenter.isVisible = isVisible;
    };

    presenter.show = function () {
        if (!presenter.isVisible) {
            presenter.setVisibility(true);
        }
    };

    presenter.hide = function () {
        if (presenter.isVisible) {
            presenter.setVisibility(false);
        }
    };

    presenter.reset = function () {
        presenter.setVisibility(presenter.configuration.isVisible);
    };

    presenter.initialize = function (view, model, isPreview) {
        presenter.$view = $(view);
        presenter.isPreview = isPreview;
        presenter.lessonScore = {
            pageCount: 0,
            checks: 0,
            errors: 0,
            mistakes: 0,
            score: 0,
            maxScore: 0,
            scaledScore: 0
        };


        presenter.configuration = presenter.validateModel(model);
        if (!presenter.configuration.isValid) {
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);
            return;
        }

        $('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");
        presenter.$view.find("div").first().attr('id', presenter.treeID);

        presenter.setVisibility(presenter.configuration.isVisible || isPreview);


        addHeader();
        if (isPreview) {
            presenter.createPreviewTree();
        } else {
            var presentation = presentationController.getPresentation();
            presenter.createTree(presentation.getTableOfContents(), null, presentation.getTableOfContents().size());
            checkIfChapterHasChildren(false);
            if(presenter.configuration.displayOnlyChapters){
                displayOnlyChapters();
            }
        }

        if (presenter.configuration.showTotal) {
            addFooter();
        }

        getJqueryTable().not('.hier_report-header').not('.hier_report-footer').treegrid({
            'initialState': 'collapsed',
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'
        });

        expandTree(presenter.configuration.expandDepth);
        if (!isPreview) {
            handleMouseClickActions();
        }

        if(presenter.configuration.displayOnlyChapters){
            presenter.$view.find("tr").each(function () {
                if($(this).hasClass("hier_report-even") || $(this).hasClass("hier_report-odd")){
                    $(this).remove();
                }
            });
        }

        checkIfChapterHasChildren(true);
    };

    function displayOnlyChapters() {
        presenter.$view.find(".hier_report-chapter").each(function () {
            var element = $(this);
            element.find(".text-wrapper").wrap('&lt;a href=""&gt;&lt;/a&gt;');
            if(element.next('tr[class*=treegrid-parent]').length &gt; 0){
                var dataPageId = element.next().find("a").attr("data-page-id");
                element.find("a").attr("data-page-id", dataPageId);
            }
        });
    }

    function checkIfChapterHasChildren (isDisplayOnlyChapters) {
        presenter.$view.find(".hier_report-chapter").each(function () {
            if($(this).next('tr[class*=treegrid-parent]').length == 0){
                if(isDisplayOnlyChapters){
                    $(this).find(".treegrid-expander").removeClass("treegrid-expander-collapsed").removeClass("treegrid-expander-expanded");
                }else{
                    $(this).remove();
                }
            }
        });
    }

    function getJqueryTable() {
        return presenter.$view.find("#" + presenter.treeID).find('table');
    }

    return presenter;
}
</presenter></addon>